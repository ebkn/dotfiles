# completion
# install plugins by :CocInstall <plugin>
# plugins are saved at ~/.config/coc/extensions
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
git switch release
'''
hook_add = '''
" tab for trigger completion
inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" <C-n>/<C-p> for navigate completion list
inoremap <silent><expr> <C-n> coc#pum#visible() ? coc#pum#next(1) : "\<C-n>"
inoremap <silent><expr> <C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"

" make <CR> to accept selected completion item
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" keymaps
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> ga <Plug>(coc-codeaction-selected)
nmap <silent> ca <Plug><coc-codeaction)
nmap <silent> rn <Plug>(coc-rename)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype)>=0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" Prettier command
command! -nargs=0  Prettier :CocCommand prettier.formatFile

" filetype
let g:coc_filetype_map = {
  \ 'typescript.jsx': 'typescriptreact',
  \ 'javascript.jsx': 'javascriptreact',
  \ }

augroup coc
  autocmd!

  " show signature help
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

  " highlight symbols
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Go
  " add tags
  autocmd FileType go nmap gtj :CocCommand go.tags.add json<cr>
  " add missing imports
  autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
  " go tests
  command! -nargs=0 GoTests :CocCommand go.test.generate.function
augroup END

" treesitter based folding
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
'''

# proto
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_linters = {
  \ 'proto': ['buf-lint'],
\}
let g:ale_fixers = {
\   'proto': ['buf-format'],
\}
let g:ale_fix_on_save = 1
'''

# Copilot
[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true
'''
