# completion
# install plugins by :CocInstall <plugin>
# plugins are saved at ~/.config/coc/extensions
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
git checkout release
'''
hook_add = '''
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" keymaps
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
" set updatetime=300

" Prettier command
command! -nargs=0  Prettier :CocCommand prettier.formatFile

" filetype
let g:coc_filetype_map = {
  \ 'typescript.jsx': 'typescriptreact',
  \ 'javascript.jsx': 'javascriptreact',
  \ }

" add missing import for golang
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
'''

[[plugins]]
repo = 'honza/vim-snippets'
