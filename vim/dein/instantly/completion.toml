# completion
# install plugins by :CocInstall <plugin>
# plugins are saved at ~/.config/coc/extensions
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
git checkout release
'''
hook_add = '''
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
function! s:check_back_space() abort
  let col=col('.') - 1
  return !col || getline('.')[col - 1]=~#'\s'
endfunction
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" keymaps
nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gy <Plug>(coc-type-definition)
nnoremap <silent> gi <Plug>(coc-implementation)
nnoremap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype)>=0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Symbol renaming.
nnoremap <leader>rn <Plug>(coc-rename)

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Prettier command
command! -nargs=0  Prettier :CocCommand prettier.formatFile

" filetype
let g:coc_filetype_map = {
  \ 'typescript.jsx': 'typescriptreact',
  \ 'javascript.jsx': 'javascriptreact',
  \ }

augroup coc
  autocmd!

  " add missing import on save
  autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
  autocmd FileType go nnoremap gtj :CocCommand go.tags.add json<cr>

  " show signature help
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

  " highlight symbols
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END
'''
