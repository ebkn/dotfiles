# autosave
[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = 'let g:autosave = 1'

# language packs
[[plugins]]
repo = 'sheerun/vim-polyglot'

# auto switch filetype
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = '''
  let g:precious_enable_switch_CursorMoved = {
    \ "*" : 0
  \}
  let g:precious_enable_switch_CursorMoved_i = {
    \	"*" : 0
  \}
  augroup test " switch when change to insert mode
    autocmd!
    autocmd InsertEnter * :PreciousSwitch
    autocmd InsertLeave * :PreciousReset
  augroup END
'''

# status line
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'onedark',
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste'],
    \     ['gitbranch', 'readonly', 'relativepath', 'modified'],
    \   ],
    \   'right': [
    \     ['percent'],
    \     ['linter_errors', 'linter_warnings'],
    \     ['fileencoding', 'filetype'],
    \   ],
    \ },
    \ 'inactive': {
    \   'left': [
    \     ['gitbranch', 'readonly', 'relativepath', 'modified'],
    \   ],
    \   'right': [
    \     ['linter_errors', 'linter_warnings'],
    \   ],
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \ },
  \ }
  let g:lightline.component_expand = {
    \  'linter_checking': 'lightline#ale#checking',
    \  'linter_warnings': 'lightline#ale#warnings',
    \  'linter_errors': 'lightline#ale#errors',
    \  'linter_ok': 'lightline#ale#ok',
    \ }
  let g:lightline.component_type = {
    \  'linter_checking': 'left',
    \  'linter_warnings': 'warning',
    \  'linter_errors': 'error',
    \  'linter_ok': 'left',
    \ }
'''
[[plugins]]
repo = 'tpope/vim-fugitive'
depends = 'lightline.vim'
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = 'lightline.vim'

# folder tree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  map <silent><C-n> :NERDTreeToggle<CR>
  let g:NERDTreeShowHidden=1
  let g:NERDTreeIgnore=['\.DS_Store', '\.git$', 'node_modules', 'bower_components', '__pycache__', '\.db', '\.sqlite$', '\.rbc$', '\~$', '\.pyc', '\.idea$', '\.vscode$', '\vendor\/bundle', '\.awcache$']
  let g:NERDTreeDirArrows=1
  let g:NERDTreeDirArrowExpandable='▸'
  let g:NERDTreeDirArrowCollapsible='▾'
  " どのファイルをsyntaxhighlightするか設定
  let g:NERDTreeFileExtensionHighlightFullName=1
  let g:NERDTreeExactMatchHighlightFullName=1
  let g:NERDTreePatternMatchHighlightFullName=1
  let g:NERDTreeLimitedSyntax=1
  " syntax highlight
  let s:brown = "905532"
  let s:aqua =  "3AFFDB"
  let s:blue = "689FB6"
  let s:darkBlue = "44788E"
  let s:purple = "834F79"
  let s:lightPurple = "834F79"
  let s:red = "AE403F"
  let s:beige = "F5C06F"
  let s:yellow = "F09F17"
  let s:orange = "D4843E"
  let s:darkOrange = "F16529"
  let s:pink = "CB6F6F"
  let s:salmon = "EE6E73"
  let s:green = "8FAA54"
  let s:lightGreen = "31B53E"
  let s:white = "FFFFFF"
  let s:rspec_red = 'FE405F'
  let s:git_orange = 'F54D27'
  let g:NERDTreeExtensionHighlightColor = {}
  let g:NERDTreeExactMatchHighlightColor = {}
  let g:NERDTreePatternMatchHighlightColor = {}
'''
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
depends = 'nerdtree'
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = 'nerdtree'
hook_add = '''
  let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
'''

# show line that has git diff
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_async=1
'''

# asynchronous loading
[[plugins]]
repo = 'Shougo/vimproc'
build = "{ \
  \ 'windows' : 'make -f make_mingw32.mak',
  \ 'cygwin' : 'make -f make_cygwin.mak',
  \ 'mac' : 'make -f make_mac.mak',
  \ 'unix' : 'make -f make_unix.mak',
\ }"

# completion
[[plugins]]
repo = 'Shougo/neocomplete'
hook_add = '''
  let g:acp_enableAtStartup=1
  let g:neocomplete#enable_at_startup=1
  let g:neocomplete#enable_smart_case=1
  let g:neocomplete#sources#syntax#min_keyword_length=2
  let g:neocomplete#enable_underbar_completion=1
  let g:neocomplete#enable_camel_case_completion=1
  let g:neocomplete#enable_auto_delimiter=1 " includes delimiter
  let g:neocomplete#auto_completion_start_length=2
  let g:neocomplete#max_list=20
  let g:neocomplete#sources#dictionary#dictionaries={
    \ 'default': '',
    \ 'vimshell': $HOME.'/.vimshell_hist',
    \ 'scheme': $HOME.'/.gosh_completions'
  \ }
  " keyword設定
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns={}
  endif
  let g:neocomplete#keyword_patterns['default']='\h\w*'
  " keymap
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " Close popup by <Space>.
  " inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
'''
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
  imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
  let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/' " 補完のディレクトリ指定
'''

# fuzzy finder
[[plugins]]
repo = '/usr/local/opt/fzf'
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  map <C-t> :Files<CR>
  let g:fzf_layout = { 'down': '~40%' }
  let g:fzf_buffers_jump=1
'''

# grep
[[plugins]]
repo = 'mhinz/vim-grepper'
hook_add = '''
  map <C-g> :Grepper -tool ag -highlight<CR>
'''

# comment out
[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add = '''
  nmap <C-c> <Plug>(caw:i:toggle)
  vmap <C-c> <Plug>(caw:i:toggle)
'''

# highlight trailing spaces
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# highlight replacing charcters
[[plugins]]
repo = 'osyo-manga/vim-over'

# linters
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_lint_on_enter=1
  let g:ale_lint_on_save=1
  let g:ale_lint_on_text_changed=0
  let g:ale_sign_column_always=1 " 左にずれるのを防止
  let g:ale_linters = {
    \ 'html': [],
    \ 'css': ['stylelint'],
    \ 'javascript': ['eslint', 'flow'],
    \ 'json': ['jsonlint'],
    \ 'ruby': ['rubocop'],
    \ 'go': ['goimports'],
    \ 'haml': ['haml-lint'],
    \ 'sass': ['sass-lint'],
    \ 'scss': ['sass-lint'],
    \ 'swift': ['swiftlint'],
    \ 'typescript': ['tslint', 'tsserver'],
    \ 'vim': ['vint'],
    \ 'yaml': ['yamllint'],
    \ }
  let g:ale_sign_error='E'
  let g:ale_sign_warning='W'
  let g:ale_echo_msg_error_str='E'
  let g:ale_echo_msg_warning_str='W'
  let g:ale_echo_msg_format='[%linter%] %s (%severity%)'
  let g:ale_statusline_format=['E %d', 'W %d', '']
  let g:ale_open_list=1
  let g:ale_set_loclist=0
  let g:ale_set_quickfix=1 " QuickFix使用
  let g:ale_keep_list_window_open=0
'''

# visualize colors
[[plugins]]
repo = 'gorodinskiy/vim-coloresque'
