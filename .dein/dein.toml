# autosave
# [[plugins]]
# repo = 'vim-scripts/vim-auto-save'
# hook_add = '''
#   let g:auto_save = 1
#   let g:auto_save_no_updatetime = 1
#   let g:auto_save_silent = 1
#   let g:auto_save_in_insert_mode = 0
# '''

# language packs
[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
  let g:polyglot_disabled = ['elm']
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# status line
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'onedark',
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste'],
    \     ['gitbranch', 'readonly', 'relativepath', 'modified'],
    \   ],
    \   'right': [
    \     ['percent'],
    \     ['linter_errors', 'linter_warnings'],
    \     ['fileencoding', 'filetype'],
    \   ],
    \ },
    \ 'inactive': {
    \   'left': [
    \     ['gitbranch', 'readonly', 'relativepath', 'modified'],
    \   ],
    \   'right': [
    \     ['linter_errors', 'linter_warnings'],
    \   ],
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \ },
  \ }
  let g:lightline.component_expand = {
    \  'linter_checking': 'lightline#ale#checking',
    \  'linter_warnings': 'lightline#ale#warnings',
    \  'linter_errors': 'lightline#ale#errors',
    \  'linter_ok': 'lightline#ale#ok',
    \ }
  let g:lightline.component_type = {
    \  'linter_checking': 'left',
    \  'linter_warnings': 'warning',
    \  'linter_errors': 'error',
    \  'linter_ok': 'left',
    \ }
'''
[[plugins]]
repo = 'tpope/vim-fugitive'
depends = 'lightline.vim'
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = 'lightline.vim'

# folder tree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  nnoremap <silent><C-n> :NERDTreeToggle<CR>
  let g:NERDTreeShowHidden=1
  let g:NERDTreeIgnore=[
    \ '\.DS_Store', '\.git$', 'node_modules', 'bower_components', '__pycache__',
    \ '\.db', '\.sqlite$', '\.rbc$', '\~$', '\.pyc', '\.idea$', '\.vscode$',
    \ '\vendor\/bundle', '\.awcache$'
  \ ]
  let g:NERDTreeDirArrows=1
  let g:NERDTreeDirArrowExpandable='▸'
  let g:NERDTreeDirArrowCollapsible='▾'
  let g:NERDTreeFileExtensionHighlightFullName=1
  let g:NERDTreeExactMatchHighlightFullName=1
  let g:NERDTreePatternMatchHighlightFullName=1
  let g:NERDTreeLimitedSyntax=1
  " syntax highlight
  let s:brown = "905532"
  let s:aqua =  "3AFFDB"
  let s:blue = "689FB6"
  let s:darkBlue = "44788E"
  let s:purple = "834F79"
  let s:lightPurple = "834F79"
  let s:red = "AE403F"
  let s:beige = "F5C06F"
  let s:yellow = "F09F17"
  let s:orange = "D4843E"
  let s:darkOrange = "F16529"
  let s:pink = "CB6F6F"
  let s:salmon = "EE6E73"
  let s:green = "8FAA54"
  let s:lightGreen = "31B53E"
  let s:white = "FFFFFF"
  let s:rspec_red = 'FE405F'
  let s:git_orange = 'F54D27'
  let g:NERDTreeExtensionHighlightColor = {}
  let g:NERDTreeExactMatchHighlightColor = {}
  let g:NERDTreePatternMatchHighlightColor = {}
'''
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
depends = 'nerdtree'
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = 'nerdtree'
hook_add = '''
  let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
'''

# show line that has git diff
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_async=1
'''

# asynchronous loading
[[plugins]]
repo = 'Shougo/vimproc'
build = '''
\ "{
  \ 'windows' : 'make -f make_mingw32.mak',
  \ 'cygwin' : 'make -f make_cygwin.mak',
  \ 'mac' : 'make -f make_mac.mak',
  \ 'unix' : 'make -f make_unix.mak',
\ }"
'''

# completion
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  let g:lsp_signs_enaled=1
  let g:lsp_async_completion=1
  if executable('docker-langserver')
      au User lsp_setup call lsp#register_server({
          \ 'name': 'docker-langserver',
          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
          \ 'whitelist': ['dockerfile'],
          \ })
  endif
  if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
  endif
  if executable('flow')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'flow',
        \ 'cmd': {server_info->['flow', 'lsp']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), '.flowconfig'))},
        \ 'whitelist': ['javascript', 'javascript.jsx'],
        \ })
  endif
  if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript'],
        \ })
  endif
  let g:lsp_log_verbose=1
  let g:lsp_log_file=expand('~/vim-lsp.log')
  if executable('solargraph')
      au User lsp_setup call lsp#register_server({
          \ 'name': 'solargraph',
          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
          \ 'initialization_options': {"diagnostics": "true"},
          \ 'whitelist': ['ruby'],
          \ })
  endif
  if executable('css-languageserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'css-languageserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
        \ 'whitelist': ['css', 'less', 'sass'],
        \ })
  endif
'''
# requires
# go get -u github.com/sourcegraph/go-langserver
# gem install solargraph
# yarn global add flow-bin dockerfile-language-server-nodejs vscode-css-languageserver-bin

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
  let g:asyncomplete_auto_popup=1
  let g:asyncomplete_log_file=expand('~/asyncomplete.log')
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
  let g:asyncomplete_remove_duplicates = 1
  let g:asyncomplete_smart_completion = 1
  set completeopt+=preview
  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
'''
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = 'asyncomplete.vim'
depends = 'vim-lsp'
merged = 0
[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
depends = 'asyncomplete.vim'
hook_add = '''
  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
'''
[[plugins]]
repo = 'prabirshrestha/asyncomplete-gocode.vim'
hook_add = '''
 call asyncomplete#register_source(asyncomplete#sources#gocode#get_source_options({
    \ 'name': 'gocode',
    \ 'whitelist': ['go'],
    \ 'completor': function('asyncomplete#sources#gocode#completor'),
    \ 'config': {
    \    'gocode_path': expand('~/go/bin/gocode')
    \  },
    \ }))
'''
# [[plugins]] # not working
# repo = 'prabirshrestha/asyncomplete-flow.vim'
# hook_add = '''
#   au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#flow#get_source_options({
#     \ 'name': 'flow',
#     \ 'whitelist': ['javascript'],
#     \ 'completor': function('asyncomplete#sources#flow#completor'),
#     \ 'config': {
#     \    " Resolves 'flow' in the closest node_modules/.bin directory (in case
#     \    " flow is installed via 'npm install flow-bin' locally). Falls back to
#     \    " 'flowbin_path' (see below) if can't find it.
#     \    'prefer_local': 1,
#     \    " Path to 'flow' executable.
#     \    'flowbin_path': expand('~/bin/flow'),
#     \    " Displays additional typeinfo exposed by flow, if any is provided.
#     \    " Defaults to 0.
#     \    'show_typeinfo': 1
#     \  },
#     \ }))
# '''
[[plugins]]
repo = 'leafgarland/typescript-vim'
[[plugins]]
repo = 'runoshun/tscompletejob'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-tscompletejob.vim'
hook_add = '''
  call asyncomplete#register_source(asyncomplete#sources#tscompletejob#get_source_options({
    \ 'name': 'tscompletejob',
    \ 'whitelist': ['typescript','tsx'],
    \ 'completor': function('asyncomplete#sources#tscompletejob#completor'),
    \ }))
'''

# fuzzy finder
[[plugins]]
repo = '~/.fzf'
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <C-f> :Files<CR>
  let g:fzf_layout = { 'down': '~40%' }
  let g:fzf_buffers_jump=1
'''

# grep
[[plugins]]
repo = 'mhinz/vim-grepper'
hook_add = '''
  nnoremap <C-g> :Grepper -tool ag -highlight<cr>
'''

# comment out
[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add = '''
  nmap <C-c> <Plug>(caw:i:toggle)
  vmap <C-c> <Plug>(caw:i:toggle)
'''

# highlight trailing spaces
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# highlight replacing charcters
[[plugins]]
repo = 'osyo-manga/vim-over'

# linters
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_lint_on_enter=1
  let g:ale_lint_on_save=1
  let g:ale_lint_on_text_changed=0
  let g:ale_sign_column_always=1
  let g:ale_linters = {
    \ 'bash': ['shellcheck'],
    \ 'css': ['stylelint', 'prettier'],
    \ 'dockerfile': ['hadolint'],
    \ 'erb': ['erb'],
    \ 'go': ['golint'],
    \ 'graphql': ['eslint', 'gqlint', 'prettier'],
    \ 'html': ['HTMLHint'],
    \ 'haml': ['haml-lint'],
    \ 'javascript': ['eslint', 'prettier', 'prettier-eslint'],
    \ 'json': ['jsonlint'],
    \ 'markdown': ['prettier', 'textlint'],
    \ 'python': ['pylint'],
    \ 'ruby': ['rubocop', 'solargraph'],
    \ 'sass': ['sass-lint'],
    \ 'scss': ['sass-lint'],
    \ 'SQL': ['sqlint', 'sqlfmt'],
    \ 'swift': ['swiftlint'],
    \ 'typescript': ['tsserver', 'prettier'],
    \ 'vim': ['vint'],
    \ 'yaml': ['yamllint'],
    \ }
  let g:ale_sign_error='E'
  let g:ale_sign_warning='W'
  let g:ale_echo_msg_error_str='E'
  let g:ale_echo_msg_warning_str='W'
  let g:ale_echo_msg_format='[%linter%] %s (%severity%)'
  let g:ale_statusline_format=['E %d', 'W %d', '']
  let g:ale_open_list=1
  let g:ale_set_loclist=0
  let g:ale_set_quickfix=1 " use QuickFix
  let g:ale_keep_list_window_open=0
  let g:ale_javascript_prettier_use_local_config=1
  let g:ale_go_langserver_executable = 'gopls'
'''

# visualize colors
[[plugins]]
repo = 'gorodinskiy/vim-coloresque'

# auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  let g:lexima_enable_basic_rules=1
  let g:lexima_enable_newline_rules=0
  let g:lexima_enable_endwise_rules=0
'''

# change operator by s+a/d/r
[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'kana/vim-operator-user'
hook_add = '''
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)
'''
